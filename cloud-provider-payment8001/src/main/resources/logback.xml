<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!-- 设置变量FILE_PATH，用于指定名为FILE的appender的目的文件存放的目录 -->
    <property name="FILE_PATH" value="E:/cloud2020/cloud-provider-payment8001/log"></property>
    <appender name="time_file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- TimeBasedRollingPolicy实现了RollingPolicy与TriggeringPolicy，
            因此只需要<rollingPolicy>标签，不需要<TriggeringPolicy>标签
            <rollingPolicy>标签有两个子标签：<fileNamePattern>、<maxHistory>
            <fileNamePattern>：用于指定文件名命名规则
            <maxHistory>：保留文件的个数，超过了就删除创建时间最久的文件
         -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 文件名 -->
            <fileNamePattern>${FILE_PATH}/java_log/test%d{yyyy-MM-dd_HH-mm}.log</fileNamePattern>
            <maxHistory>10</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{0} -%msg%n</pattern>
        </encoder>
    </appender>

    <appender name="consoleLog" class="ch.qos.logback.core.ConsoleAppender">
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>
                <!-- 指定输出格式
                  %d{} :表示时间
                  %thread:请求记录所在的线程名
                  %-5level：用5位显示请求级别
                  %logger{36}：输出logger名，{36}表示logger名最大占用的字符位数，{0}表示最简短logger名（不包含包名）。
                -->
                %d{yyyyMMdd HH:mm:ss.SSS} [%thread] %-5level %logger{32} -%msg%n
            </pattern>
        </layout>
    </appender>
    <appender name="fileInfoLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>DENY</onMatch>
            <onMismatch>ACCEPT</onMismatch>
        </filter>
        <encoder>
            <pattern>
                %d{yyyyMMdd HH:mm:ss.SSS} [%thread] %-5level %logger{32} -%msg%n
            </pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>E:\cloud2020\cloud-provider-payment8001\log\%d\info.%d.log</fileNamePattern>
        </rollingPolicy>
    </appender>
    <appender name="fileErrorLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <encoder>
            <pattern>
                %d{yyyyMMdd HH:mm:ss.SSS} [%thread] %-5level %logger{32} -%msg%n
            </pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>E:\cloud2020\cloud-provider-payment8001\log\%d\err.log</fileNamePattern>
        </rollingPolicy>
    </appender>
    <root level="info">
        <appender-ref ref="consoleLog"/>
        <!-- 这里fileInfoLog 与time_file 2选1-->
        <!--<appender-ref ref="fileInfoLog"/>-->
        <appender-ref ref="time_file"/>
        <appender-ref ref="fileErrorLog" />
    </root>
</configuration>

<!--
<appender name="consoleLog" .......>：日志格式化输出
<layout class="ch.qos.logback.classic.PatternLayout">：layout指的是在控制台进行日式格式化输出
<appender name="fileInfoLog"。。。。。> ：指定对应的日志文件，在日志文件中进行格式化输出
filter：进行日志过滤，主要是针对日志级别过滤，将日志的info，和error日志分开显示在不同的文件中。
-->
